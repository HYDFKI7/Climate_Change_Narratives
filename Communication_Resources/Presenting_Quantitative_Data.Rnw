\documentclass{article}
\usepackage{gensymb}

\title{Visual Presentation of Data using R}

<<echo=FALSE>>=
Thailandcsv = "/home/CAMPUS/mwl04747/github/Climate_Change_Narratives/Data/MLH/Thailand_GHCND:TH000048456.csv"
climate_data <- read.csv(Thailandcsv)

climate_data$TMAX[climate_data$TMAX==-9999] = NA
climate_data$TMIN[climate_data$TMIN==-9999] = NA


strDates <- as.character(climate_data$DATE)

climate_data$NewDate <- as.Date(strDates, "%Y%m%d")
climate_data$Month = format(as.Date(climate_data$NewDate), format = "%m")
climate_data$Year = format(climate_data$NewDate, format="%Y")

MonthlyTMAXMean = aggregate(TMAX ~ Month + Year, climate_data, mean)
MonthlyTMINMean = aggregate(TMIN ~ Month + Year, climate_data, mean)

MonthlyTMAXMean$YEAR = as.numeric(MonthlyTMAXMean$Year)
MonthlyTMAXMean$MONTH = as.numeric(MonthlyTMAXMean$Month)

MonthlyTMINMean$YEAR = as.numeric(MonthlyTMINMean$Year)
MonthlyTMINMean$MONTH = as.numeric(MonthlyTMINMean$Month)

#ylab <- expression('stuck'*'together'*'eg:'*mu*'liter')
#xlab <- expression('sep'~'par'~'at'~'ed'~'eg:'~mu~'liter')
@

\begin{document}
\maketitle

\section{The Perfect Graphic}

\subsection{Best Practices}

There is no such thing as the perfect graphic, but there are conventions that can be used to guide us to create accurtate, accessible, and visually pleasing grahics. But like many things, it takes some practices. 

Here are some general rules:

\begin{itemize}
  \item Be sure that you introduce the graphic/table with text -- i.e. text first, then graphic. 
  \item Cite the graphic/table with a figure or table number. 
  \item Describe the graphic/table with a caption.
  \item Manage data range and transformations to effectively analyze and display the data.
  \item Make sure the axes are labeled with appropriate units
  \item Manage axes label and values font size and orientation to make them easy to reads.
  \item Avoid graphic titles unless you have more than one panel, i.e. graphics that are side by side or on top of each other. 
  \item Do not connect data points with lines unless you can 'reasonable' interpolate between the points, e.g. a continous data set with some level of autocorrelation. 
  \item Are the graphics accessible?  For example, black and white can be better than color in terms of accessibility (universal design) and sustainability. 
  \item Use the caption to describe what the reader is supposed to see in the figure. 
\end{itemize}

\subsection{How to Cite Software}

In the text, students often make a bigger deal out the software than it deserses. Probably, because we feel like we climbed a big mountain to have some success and want demonstrate that. However, in general, environmental scientists downplay the software, unless they wrote a specific function or library. 

Thus, for our purposes, the following is usually sufficient...

\noindent ``Statistical analysis was conducted using using R (CRAN 2019)."

You don't need to mention how you imported it, used Rstudio, or talk about the functions. In the text, you might mention that you used a linear model, regression, analysis of variance (AOV), but the details of the R code is usually not mentioned.


\section{Exploring the Histogram}

Data exploration can include many steps, but starting with a histogram gives the researcher the ability to evaluate the distribution of the data.

Below is a default histogram for TMAX values, where we might be able to visually how normally distributed the data might be.

<<>>=
hist(MonthlyTMAXMean$TMAX)
@

The default graphic is hideous -- so, let's start fixing it. 

\subsection{Title and Axis Labels}

For stand alone figures, we usually add titles, but in papers and lab reports it's a good practice to remove the title and use the caption to describe the graphic. Changes to the title can be made with arguments within the plot command, i.e. `main=NULL'.

In addition, we can change the x-axis label, with the 'xlab' argument. Specifying the units is also required. And in this case, we want to add the \degree symbol and create a text string with the axis label in quotes that can be referenced in the hist() funtion. 

<<fig.cap='Histogram of Maximum Temperatures (°C) (XXX, Thailand, 1940-2018)'>>=
TMAXlabel <- "Maximum Temperature (°C)"
hist(MonthlyTMAXMean$TMAX, main=NULL, xlab=TMAXlabel)
@

\subsection{Putting Multiple Figures in a Row}

To create two graphics in one row, we can change the graphic parameters with the par() function. In this case, we'll create two column panels in one row using the 'mfrow' option and a vector that defines the number of rows and the number of columns. It's often a good idea to set the graphic parameter back to the default afterwards. In this case, I added a title because we have a panel with two graphics. Often people will put letters, e.g. A and B to refer to each one separately, but I prefer to put the actually description in the title, so the reader doesn't have to go back and forth between the caption and the figures.

<<fig.cap="Mean monthly maximum and minimum tempetures (C) ((XXX, Thailand, 1940-2018))">>=
par(mfrow=c(1,2))
hist(MonthlyTMAXMean$TMAX, main='Maximum Temperature', xlab=TMAXlabel)
TMINlabel <- "Minimum Temperature (°C)"
hist(MonthlyTMINMean$TMIN, main='Minimum Temperature', xlab=TMINlabel)
par(mfrow=c(1,1))
@

Because the figure is rather distorted, I have constrained the size using a fig.height and fig.width option. 

<<fig.cap="Mean monthly maximum and minimum tempetures (C) ((XXX, Thailand, 1940-2018))", fig.height=3.5, fig.width=6>>=
par(mfrow=c(1,2))
hist(MonthlyTMAXMean$TMAX, main='Monthly Maximum Temperature', xlab=TMAXlabel)
TMINlabel <- "Minimum Temperature (°C)"
hist(MonthlyTMINMean$TMIN, main='Monthly Minimum Temperature', xlab=TMINlabel)
par(mfrow=c(1,1))
@

\section{Boxplot}



\section{Scatter Plot -- Non-time series}


\subsection{Scatter Plot -- Time Series}

For scatter plots, which are more common, we use the same principles:

<<>>=
plot(TMAX ~ YEAR, data=MonthlyTMAXMean[MonthlyTMAXMean$MONTH==5,])
abline(coef(lm(TMAX ~ YEAR, data=MonthlyTMAXMean[MonthlyTMAXMean$MONTH==5,])),
    col='darkred')
@

Let's fix the y-axis label as we did above (TMAX is not a very helpful label!). Furthermore, the x-axis needs to be calmed down some, so let's change the case for these. We will also change the symbols to make it less busy with the `pch' argument. You can look online to see the choices one has in R. 

I am also not impress with the vertical orientation of the y-axis, so it's important to change these as well. 

Finally, it's important that the image works in black and white. So, let's see if we can modify the graphic to make it less resource intensive. Finally, let's add a caption and reference to the figure (Figure \ref{fig:maxtemp}).

\begin{figure}[h]
<<>>=
ylabel <- "Maximum Temperature (°C)"
plot(TMAX ~ YEAR, data=MonthlyTMAXMean[MonthlyTMAXMean$MONTH==5,], 
     ylab=ylabel, xlab='Year', pch=20, las=1, col='gray')

abline(coef(lm(TMAX ~ YEAR, 
    data=MonthlyTMAXMean[MonthlyTMAXMean$MONTH==5,])), col='black')
@
\caption{Monthly Average of Daily Maximum Temperatures (\degree C).}
\label{fig:maxtemp}
\end{figure}

Now, what if we only want to display part of the data. We can limit the x-axis range using the 'xlim' argument, where we create a vector of for the start and end of the range.  

\begin{figure}[h]
<<>>=
ylabel <- "Maximum Temperature (°C)"
plot(TMAX ~ YEAR, data=MonthlyTMAXMean[MonthlyTMAXMean$MONTH==5,],
     xlim=c(1940, 2000),
     ylab=ylabel, xlab='Year', pch=20, las=1, col='gray')

abline(coef(lm(TMAX ~ YEAR, 
    data=MonthlyTMAXMean[MonthlyTMAXMean$MONTH==5,])), col='black')
@
\caption{Monthly Average of Daily Maximum Temperatures (\degree C).}
\label{fig:maxtemp}
\end{figure}

Alternatively, you may want to creat a best fit line that only covers the range for the existing data without extrapolating, which is usually a very good idea for most scientific endeavors!




\section{Bar Graphs}


\section{Tables}





\end{document}
